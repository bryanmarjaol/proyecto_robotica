#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
import numpy as np
from markers import *
from functions import *
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

if __name__ == '__main__':

    # Initialize the node
    rospy.init_node("testKineControlPose")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

    fqact = open("/tmp/qactual.txt", "w")
    fxact = open("/tmp/xactual.txt", "w")
    fxdes = open("/tmp/xdeseado.txt", "w")

    # Markers for the current and desired positions
    bmarker_current = FrameMarker()
    bmarker_desired = FrameMarker(0.5)

    # Joint names
    jnames = ['Base_to_Link1', 'Link1_to_Link2', 'Link2_to_Link3', 'Link3_to_Link4', 'Link4_to_Link5', 'Link5_to_Link6',
              'Link6_to_Base_Gripper', 'Base_Gripper_to_Gripper_Right', 'Base_Gripper_to_Gripper_Left']

    # Desired pose
    Rd = roty(pi)@rotz(pi/2)
    qd = rot2quat(Rd)
    # Find an xd that the robot can reach
    xd = np.array([0.5, 1.2, 1, qd[0], qd[1], qd[2], qd[3]])
    # xd  = np.array([0.5, 0.5, 0.6, np.cos(ang/2.0), 0, 0, np.sin(ang/2.0)])
    # Initial configuration
    q0 = np.array([0, 0, 0, 0, 0, 0, 0])

    # Resulting initial pose (end effector with respect to the base link)
    T = fkine_majager(q0)
    x0 = TF2xyzquat(T)

    # Markers for the current and the desired pose
    bmarker_current.setPose(x0)
    bmarker_desired.setPose(xd)


    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    q_2 = np.append(q0, [0.03, 0.03])
    jstate.position = q_2

    # Frequency (in Hz) and control period
    freq = 500
    dt = 1.0 / freq
    rate = rospy.Rate(freq)

    # Initial joint configuration
    q = copy(q0)
    x = copy(x0)
    # Initialize the derror vector (derivative of the error)
    derror = np.zeros(7)

    k_error_position = 180
    k_error_orientation = 120
    k_amortiguado = 13

    t = 0

    quat_error_data = []
    # Main loop
    #for i in range(1):

    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Kinematic control law for the pose (complete here)
        # --------------------------------------------------
        J = jacobian_pose(q)
        #print(q)

        position = x[0:3]
        quat = x[3:7]

        quat_inv = copy(quat)
        quat_inv[1:] = [-a for a in quat_inv[1:]]

        position_error=position-xd[0:3]
        quat_error=quaternionMult(qd,quat_inv)
        print(quat_error)
        quat_error[0]=quat_error[0]-1

        quat_magnitude_error = np.linalg.norm(quat_error)
        quat_error_data.append(quat_magnitude_error)

        fxact.write(str(t) + ' ' + str(x[0]) + ' ' + str(x[1]) + ' ' + str(x[2]) + '\n')
        fxdes.write(str(t) + ' ' + str(xd[0]) + ' ' + str(xd[1]) + ' ' + str(xd[2]) + '\n')
        fqact.write(str(t) + ' ' + str(q[0]) + ' ' + str(q[1]) + ' ' + str(q[2]) + ' ' + str(q[3]) + ' ' + str(
            q[4]) + ' ' + str(q[5]) + ' ' + str(q[6]) + '\n ')
        #x_error= np.append(position_error,quat_error)

        #derror = -k_error * x_error

        derror = np.append(-k_error_position*position_error,-k_error_orientation*quat_error)
        q = q + dt * np.linalg.inv((np.transpose(J) @ J) + (k_amortiguado ** 2) * np.identity(7)) @ np.transpose(
            J) @ derror

        q[1] = np.clip(q[1], -3.3161255, 1.3963)
        q[2] = np.clip(q[2], -0.7, 4.2)
        q[4] = np.clip(q[4], -0.87266, 4.01426)
        q[5] = np.clip(q[5], 0.0, 0.3)

        t = t + dt

        # Current configuration trnaformation to current position
        T = fkine_majager(q)
        x = TF2xyzquat(T)
        # Publish the message
        q_2 = np.append(q, [0.03, 0.03])
        jstate.position = q_2
        pub.publish(jstate)
        bmarker_desired.setPose(xd)
        bmarker_current.setPose(x)
        # Wait for the next iteration
        rate.sleep()

    print('ending motion ...')
    fqact.close()
    fxact.close()
    fxdes.close()

    print("\n")
    print(f"Posición deseada: X:{xd[0]}, Y:{xd[1]}, Z:{xd[2]}")
    print(f"Posición final: X:{x[0]:.3f}, Y:{x[1]:.3f}, Z:{x[2]:.3f}")
    print("\n")

    # Leer datos desde el archivo
    with open("/tmp/xactual.txt", 'r') as file:
        lines = file.readlines()
    with open("/tmp/xdeseado.txt", 'r') as file:
        lines2 = file.readlines()
    # Inicializar listas para almacenar las coordenadas
    x_data = []
    y_data = []
    z_data = []
    t_data = []

    xd_data = []
    yd_data = []
    zd_data = []
    td_data = []
    # Procesar cada línea del archivo
    for line in lines:
        # Dividir la línea en valores de x, y, y z
        data = line.split()
        # Convertir los valores a números flotantes y agregarlos a las listas correspondientes
        t_data.append(float(data[0]))
        x_data.append(float(data[1]))
        y_data.append(float(data[2]))
        z_data.append(float(data[3]))

    for line2 in lines2:
        # Dividir la línea en valores de x, y, y z
        data2 = line2.split()
        # Convertir los valores a números flotantes y agregarlos a las listas correspondientes
        td_data.append(float(data2[0]))
        xd_data.append(float(data2[1]))
        yd_data.append(float(data2[2]))
        zd_data.append(float(data2[3]))
    # Convertir las listas de coordenadas a arrays de NumPy

    x_data = np.array(x_data)
    y_data = np.array(y_data)
    z_data = np.array(z_data)
    t_data = np.array(t_data)
    xd_data = np.array(xd_data)
    yd_data = np.array(yd_data)
    zd_data = np.array(zd_data)
    td_data = np.array(td_data)

    # Crear la gráfica
    fig, axs = plt.subplots(3, 1, figsize=(10, 10), edgecolor='black')
    formatter1 = ticker.ScalarFormatter(useMathText=True)
    formatter1.set_scientific(True)
    formatter1.set_powerlimits((-1, 1))

    axs[0].plot(t_data, x_data, label='x')
    axs[0].plot(td_data, xd_data, linestyle='--', label='x_ref')
    axs[0].set_xlabel('t (s)')
    axs[0].set_ylabel('posición (m)')
    axs[0].set_title('Gráfica de Posición x')
    axs[0].grid(True)
    axs[0].legend(loc="best")
    axs[0].xaxis.set_major_formatter(formatter1)
    axs[0].yaxis.set_major_formatter(formatter1)

    axs[1].plot(t_data, y_data, label='y')
    axs[1].plot(td_data, yd_data, linestyle='--', label='y_ref')
    axs[1].set_xlabel('t (s)')
    axs[1].set_ylabel('posición (m)')
    axs[1].set_title('Gráfica de Posición y')
    axs[1].grid(True)
    axs[1].legend(loc="best")
    "axs[1].xaxis.set_major_formatter(formatter1)"
    "axs[1].yaxis.set_major_formatter(formatter1)"

    axs[2].plot(t_data, z_data, label='z')
    axs[2].plot(td_data, zd_data, linestyle='--', label='z_ref')
    axs[2].set_xlabel('t (s)')
    axs[2].set_ylabel('posición (m)')
    axs[2].set_title('Gráfica de Posición z')
    axs[2].grid(True)
    axs[2].legend(loc="best")
    "axs[2].xaxis.set_major_formatter(formatter1)"
    "axs[2].yaxis.set_major_formatter(formatter1)"
    plt.tight_layout()
    # Etiquetas y título

    with open("/tmp/qactual.txt", 'r') as file:
        lines3 = file.readlines()
    lines3 = lines3[:-1]


    # Inicializar listas para almacenar las coordenadas
    q1_data = []
    q2_data = []
    q3_data = []
    q4_data = []
    q5_data = []
    q6_data = []
    q7_data = []

    t_data = []
    # Procesar cada línea del archivo
    for line in lines3:
        # Dividir la línea en valores de x, y, y z
        data = line.split()
        # Convertir los valores a números flotantes y agregarlos a las listas correspondientes
        t_data.append(float(data[0]))
        q1_data.append(float(data[1]))
        q2_data.append(float(data[2]))
        q3_data.append(float(data[3]))
        q4_data.append(float(data[4]))
        q5_data.append(float(data[5]))
        q6_data.append(float(data[6]))
        q7_data.append(float(data[7]))

        # Convertir las listas de coordenadas a arrays de NumPy

    q1_data = np.array(q1_data)
    q2_data = np.array(q2_data)
    q3_data = np.array(q3_data)
    q4_data = np.array(q4_data)
    q5_data = np.array(q5_data)
    q6_data = np.array(q6_data)
    q7_data = np.array(q7_data)
    t_data = np.array(t_data)

    # Crear la gráfica
    fig2, axs2 = plt.subplots(3, 3, figsize=(10, 10), edgecolor='black')

    formatter = ticker.ScalarFormatter(useMathText=True)
    formatter.set_scientific(True)
    formatter.set_powerlimits((-1, 1))
    for ax in axs2.flat:
        ax.xaxis.set_major_formatter(formatter)
        ax.yaxis.set_major_formatter(formatter)

    axs2[0,0].plot(t_data, q1_data, label='q1')
    axs2[0,0].set_xlabel('t (s)')
    axs2[0,0].set_ylabel('q (rad)')
    axs2[0,0].set_title('Gráfica de q1')
    axs2[0,0].grid(True)
    axs2[0,0].legend(loc="best")

    axs2[0,1].plot(t_data, q2_data, label='q2')
    axs2[0,1].set_xlabel('t (s)')
    axs2[0,1].set_ylabel('q (rad)')
    axs2[0,1].set_title('Gráfica de q2')
    axs2[0,1].grid(True)
    axs2[0,1].legend(loc="best")

    axs2[0,2].plot(t_data, q3_data, label='q3')
    axs2[0,2].set_xlabel('t (s)')
    axs2[0,2].set_ylabel('q (rad)')
    axs2[0,2].set_title('Gráfica de q3')
    axs2[0,2].grid(True)
    axs2[0,2].legend(loc="best")

    axs2[1,0].plot(t_data, q4_data, label='q4')
    axs2[1,0].set_xlabel('t (s)')
    axs2[1,0].set_ylabel('q (rad)')
    axs2[1,0].set_title('Gráfica de q4')
    axs2[1,0].grid(True)
    axs2[1,0].legend(loc="best")

    axs2[1,1].plot(t_data, q5_data, label='q5')
    axs2[1,1].set_xlabel('t (s)')
    axs2[1,1].set_ylabel('q (rad)')
    axs2[1,1].set_title('Gráfica de q5')
    axs2[1,1].grid(True)
    axs2[1,1].legend(loc="best")

    axs2[1,2].plot(t_data, q6_data, label='q6')
    axs2[1,2].set_xlabel('t (s)')
    axs2[1,2].set_ylabel('q (rad)')
    axs2[1,2].set_title('Gráfica de q6')
    axs2[1,2].grid(True)
    axs2[1,2].legend(loc="best")

    axs2[2, 0].axis('off')

    axs2[2,1].plot(t_data, q7_data, label='q7')
    axs2[2,1].set_xlabel('t (s)')
    axs2[2,1].set_ylabel('q (rad)')
    axs2[2,1].set_title('Gráfica de q7')
    axs2[2,1].grid(True)
    axs2[2,1].legend(loc="best")

    axs2[2, 2].axis('off')

    plt.tight_layout()

    # Crear la figura y el espacio 3D
    fig = plt.figure(3)
    ax = fig.add_subplot(111, projection='3d')

    # Graficar los puntos en 3D
    ax.plot(x_data, y_data, z_data)
    ax.scatter(x0[0], x0[1], x0[2], color='red', label='Initial Position')
    ax.scatter(xd[0], xd[1], xd[2], color='green', label='Expected Position')

    # Configurar etiquetas
    ax.set_xlabel('X (m)')
    ax.set_ylabel('Y (m)')
    ax.set_zlabel('Z (m)')
    ax.set_title('Posición del efector final 3D')

    x_limits = ax.get_xlim3d()
    y_limits = ax.get_ylim3d()
    z_limits = ax.get_zlim3d()

    x_range = x_limits[1] - x_limits[0]
    y_range = y_limits[1] - y_limits[0]
    z_range = z_limits[1] - z_limits[0]

    max_range = max(x_range, y_range, z_range)

    mid_x = (x_limits[1] + x_limits[0]) * 0.5
    mid_y = (y_limits[1] + y_limits[0]) * 0.5
    mid_z = (z_limits[1] + z_limits[0]) * 0.5

    ax.set_xlim3d([mid_x - max_range / 2, mid_x + max_range / 2])
    ax.set_ylim3d([mid_y - max_range / 2, mid_y + max_range / 2])
    ax.set_zlim3d([mid_z - max_range / 2, mid_z + max_range / 2])

    plt.tight_layout()

    quat_error_data = np.array(quat_error_data)
    plt.figure()
    plt.plot(np.arange(len(quat_error_data)) * dt, quat_error_data, label='Magnitud del Error del Cuaternión')
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Magnitud del Error')
    plt.title('Error de Orientación del Cuaternión a lo Largo del Tiempo')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    # Mostrar la gráfica
    plt.show()