#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
import numpy as np
from markers import *
from functions import *

if __name__ == '__main__':

    # Initialize the node
    rospy.init_node("testKineControlPose")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
    # Markers for the current and desired positions
    bmarker_current = FrameMarker()
    bmarker_desired = FrameMarker(0.5)

    # Joint names
    jnames = ['Base_to_Link1', 'Link1_to_Link2', 'Link2_to_Link3', 'Link3_to_Link4', 'Link4_to_Link5', 'Link5_to_Link6',
              'Link6_to_Base_Gripper', 'Base_Gripper_to_Gripper_Right', 'Base_Gripper_to_Gripper_Left']

    # Desired pose
    Rd = roty(pi)@rotz(pi/3)@rotx(pi/6)
    qd = rot2quat(Rd)
    # Find an xd that the robot can reach
    xd = np.array([0.3, 1, 1, qd[0], qd[1], qd[2], qd[3]])
    # xd  = np.array([0.5, 0.5, 0.6, np.cos(ang/2.0), 0, 0, np.sin(ang/2.0)])
    # Initial configuration
    q0 = np.array([0, 0, 0, 0, 0, 0, 0])

    # Resulting initial pose (end effector with respect to the base link)
    T = fkine_majager(q0)
    x0 = TF2xyzquat(T)

    # Markers for the current and the desired pose
    bmarker_current.setPose(x0)
    bmarker_desired.setPose(xd)


    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    q_2 = np.append(q0, [0.03, 0.03])
    jstate.position = q_2

    # Frequency (in Hz) and control period
    freq = 500
    dt = 1.0 / freq
    rate = rospy.Rate(freq)

    # Initial joint configuration
    q = copy(q0)
    x = copy(x0)
    # Initialize the derror vector (derivative of the error)
    derror = np.zeros(7)

    k_error_position = 100
    k_error_orientation = 100
    k_amortiguado = 7.5


    # Main loop
    #for i in range(1):

    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Kinematic control law for the pose (complete here)
        # --------------------------------------------------
        J = jacobian_pose(q)
        #print(q)

        position = x[0:3]
        quat = x[3:7]

        quat_inv = copy(quat)
        quat_inv[1:] = [-a for a in quat_inv[1:]]

        position_error=position-xd[0:3]
        quat_error=quaternionMult(qd,quat_inv)
        quat_error[0]=quat_error[0]-1

        #x_error= np.append(position_error,quat_error)

        #derror = -k_error * x_error

        derror = np.append(-k_error_position*position_error,k_error_orientation*quat_error)
        q = q + dt * np.linalg.inv((np.transpose(J) @ J) + (k_amortiguado ** 2) * np.identity(7)) @ np.transpose(
            J) @ derror

        q[1] = min(max(q[1], -3.3161255), 1.3963)
        q[2] = min(max(q[2], -0.7), 4.2)
        q[4] = min(max(q[3], -0.87266), 4.01426)

        q[5] = min(max(q[5], 0.0), 0.3)
        # Current configuration trnaformation to current position
        T = fkine_majager(q)
        x = TF2xyzquat(T)
        # Publish the message
        q_2 = np.append(q, [0.03, 0.03])
        jstate.position = q_2
        pub.publish(jstate)
        bmarker_desired.setPose(xd)
        bmarker_current.setPose(x)
        # Wait for the next iteration
        rate.sleep()
