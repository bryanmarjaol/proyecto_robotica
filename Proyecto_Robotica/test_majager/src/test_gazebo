#!/usr/bin/env python3
import rospy
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

if __name__ == '__main__':
    rospy.init_node("test_gazebo", disable_signals=True)

    # Ajustar el espacio de nombres y el nombre del controlador según tu configuración
    robot_client = actionlib.SimpleActionClient('/majager/majager_joint_controller/follow_joint_trajectory',
                                                FollowJointTrajectoryAction)

    gripper_client = actionlib.SimpleActionClient('/majager/gripper_controller/follow_joint_trajectory',
                                                  FollowJointTrajectoryAction)

    print("Waiting for server...")
    robot_client.wait_for_server()
    print("Connected to server")

    print("Waiting for gripper controller server...")
    gripper_client.wait_for_server()
    print("Connected to gripper controller server")


    # Nombres de articulaciones correctos según tu definición en el URDF/xacro
    joint_names = ['Base_to_Link1', 'Link1_to_Link2', 'Link2_to_Link3', 'Link3_to_Link4', 'Link4_to_Link5',
                   'Link5_to_Link6', 'Link6_to_Base_Gripper']

    gripper_joint_names = ['Base_Gripper_to_Gripper_Right', 'Base_Gripper_to_Gripper_Left']

    gripper_positions = [0.0, 0.0]
    gripper_goal = FollowJointTrajectoryGoal()
    gripper_goal.trajectory = JointTrajectory()
    gripper_goal.trajectory.joint_names = gripper_joint_names
    gripper_goal.trajectory.points = [JointTrajectoryPoint(positions=gripper_positions, velocities=[0]*2, time_from_start=rospy.Duration(2.0))]
    gripper_client.send_goal(gripper_goal)
    gripper_client.wait_for_result()

    positions = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  # Ajustar posiciones iniciales

    goal = FollowJointTrajectoryGoal()
    goal.trajectory = JointTrajectory()
    goal.trajectory.joint_names = joint_names
    goal.trajectory.points = [JointTrajectoryPoint(positions=positions, velocities=[0]*7, time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(goal)
    robot_client.wait_for_result()

    rospy.sleep(1)
    rate = rospy.Rate(10)

    positions[0] = 2.9

    goal.trajectory.points = [
        JointTrajectoryPoint(positions=positions, velocities=[0] * 7, time_from_start=rospy.Duration(2.0))
    ]
    robot_client.send_goal(goal)

    rospy.sleep(1.8)

    positions[0] = 4.7124

    goal.trajectory.points = [
        JointTrajectoryPoint(positions=positions, velocities=[0] * 7, time_from_start=rospy.Duration(2.0))
    ]
    robot_client.send_goal(goal)
    robot_client.wait_for_result()

    positions[1] = 0.5236
    positions[2] = 0.5236
    positions[4] = 1.57

    goal.trajectory.points = [
        JointTrajectoryPoint(positions=positions, velocities=[0] * 7, time_from_start=rospy.Duration(2.0))
    ]
    robot_client.send_goal(goal)
    robot_client.wait_for_result()

    positions[3] = 3.1416

    goal.trajectory.points = [
        JointTrajectoryPoint(positions=positions, velocities=[0] * 7, time_from_start=rospy.Duration(2.0))
    ]
    robot_client.send_goal(goal)
    robot_client.wait_for_result()

    positions[4] += 1.0472
    positions[5] = 0.2

    goal.trajectory.points = [
        JointTrajectoryPoint(positions=positions, velocities=[0] * 7, time_from_start=rospy.Duration(2.0))
    ]
    robot_client.send_goal(goal)
    robot_client.wait_for_result()

    positions[6] = 3.1416

    goal.trajectory.points = [JointTrajectoryPoint(positions=positions, velocities=[0] * 7, time_from_start=rospy.Duration(2))]
    robot_client.send_goal(goal)
    robot_client.wait_for_result()

    rate.sleep()

    gripper_positions[0] = 0.065
    gripper_positions[1] = 0.065

    gripper_goal.trajectory.points = [
        JointTrajectoryPoint(positions=gripper_positions, velocities=[0] * 2, time_from_start=rospy.Duration(1))]
    gripper_client.send_goal(gripper_goal)
    gripper_client.wait_for_result()

    gripper_positions[0] = 0
    gripper_positions[1] = 0

    gripper_goal.trajectory.points = [
        JointTrajectoryPoint(positions=gripper_positions, velocities=[0] * 2, time_from_start=rospy.Duration(1))]
    gripper_client.send_goal(gripper_goal)
    gripper_client.wait_for_result()

    positions = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

    goal.trajectory.points = [JointTrajectoryPoint(positions=positions, velocities=[0] * 7, time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(goal)
    robot_client.wait_for_result()

    robot_client.cancel_goal()
    gripper_client.cancel_goal()

