#!/usr/bin/env python3
import rospy
import actionlib
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

if __name__ == '__main__':
    rospy.init_node("test_gazebo", disable_signals=True)

    # Ajustar el espacio de nombres y el nombre del controlador según tu configuración
    robot_client = actionlib.SimpleActionClient('/majager/majager_joint_controller/follow_joint_trajectory',
                                                FollowJointTrajectoryAction)

    print("Waiting for server...")
    robot_client.wait_for_server()
    print("Connected to server")

    # Nombres de articulaciones correctos según tu definición en el URDF/xacro
    joint_names = ['Base_to_Link1', 'Link1_to_Link2', 'Link2_to_Link3', 'Link3_to_Link4', 'Link4_to_Link5',
                   'Link5_to_Link6', 'Link6_to_Base_Gripper']
    initial_positions = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  # Ajustar posiciones iniciales

    goal = FollowJointTrajectoryGoal()
    goal.trajectory = JointTrajectory()
    goal.trajectory.joint_names = joint_names

    # Posición inicial
    goal.trajectory.points = [
        JointTrajectoryPoint(positions=initial_positions, velocities=[0] * 7, time_from_start=rospy.Duration(2.0))
    ]
    robot_client.send_goal(goal)
    robot_client.wait_for_result()
    rospy.sleep(1)

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        robot_client.cancel_goal()

        # Modificación de la posición para simular movimiento
        initial_positions[0] += 0.1  # Ejemplo de modificación


        goal.trajectory.points = [
            JointTrajectoryPoint(positions=initial_positions, velocities=[0] * 7, time_from_start=rospy.Duration(0.01))
        ]
        robot_client.send_goal(goal)
        robot_client.wait_for_result()

        rate.sleep()

    robot_client.cancel_goal()