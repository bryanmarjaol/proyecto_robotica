#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

from markers import *
from functions import *

pi = np.pi

if __name__ == '__main__':

    rospy.init_node("testForwardKine")
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    bmarker = BallMarker(color['GREEN'])

    # Joint names
    jnames = ['Base_to_Link1', 'Link1_to_Link2', 'Link2_to_Link3', 'Link3_to_Link4', 'Link4_to_Link5', 'Link5_to_Link6',
              'Link6_to_Base_Gripper', 'Base_Gripper_to_Gripper_Right', 'Base_Gripper_to_Gripper_Left']
    # Joint Configuration
    q = np.array([5, 1.3963, 0.2, 3, 3, 0.1, 3])

    q[1] = min(max(q[1], -3.3161255), 1.3963)
    q[2] = min(max(q[2], -0.7), 4.2)
    q[4] = min(max(q[4], -0.87266), 4.01426)
    q[5] = min(max(q[5], 0.0), 0.3)

    # End effector with respect to the base
    T = fkine_majager(q)
    print("\n")
    print("Articulaci√≥n: " + "q1: " + str(q[0]) + " rad, q2: " + str(q[1]) + " rad, q3: " + str(q[2]) + " rad")
    print("              q4: " + str(q[3]) + " rad, q5: " + str(q[4]) + " rad, q6: " + str(q[5]) + " m, q7: " + str(
        q[6]) + " rad")
    print("Obtained value:")
    print(np.round(T, 3))
    print("\n")
    bmarker.position(T)

    # Object (message) whose type is JointState
    jstate = JointState()
    # Set values to the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    q = np.append(q, [0.03, 0.03])
    jstate.position = q

    # Loop rate (in Hz)
    rate = rospy.Rate(100)
    # Continuous execution loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Publish the message
        pub.publish(jstate)
        bmarker.publish()
        # Wait for the next iteration
        rate.sleep()

